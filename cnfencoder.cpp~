#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <fstream>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <tuple>

struct Node{
  int id,x,y,k;
};

std::vector<Node> node_list;
Node node;
std::vector<std::string> cnf;
std::vector<std::string> cnf_head;
int cnf_no=0;

int getNodeNo(int x,int y,int k){
  for(auto e:node_list){
    if(e.x==x && e.y==y && e.k==k){
      return e.id;
    }
  }
  return -1;
}

int getXNo(int node_no){
  for(auto e:node_list){
    if(e.id == node_no){
      return e.x;
    }
  }
  return -1;
}

int getYNo(int node_no){
  for(auto e:node_list){
    if(e.id == node_no){
      return e.y;
    }
  }
  return -1;
}

int getKNo(int node_no){
  for(auto e:node_list){
    if(e.id == node_no){
      return e.k;
    }
  }
  return -1;
}

void addCNF0va(){
  std::string str;
  str += ("0");
  cnf.push_back(str);
}

void addCNF1va(int cons){
  std::string str;
  str += std::to_string(cons);
  cnf.push_back(str);
}

void addCNF2va(int cons1,int cons2){
  std::string str;
  str += ("-");
  str += std::to_string(cons1);
  str += (" ");
  str += ("-");
  str += std::to_string(cons2);
  str += (" ");
  str += ("0");
  cnf.push_back(str);
}

void addCNF3va(int cons){
  std::string str;
  str += ("-");
  str += std::to_string(cons);
  cnf.push_back(str);
}

void addCNF4va(int k){
  std::string str;
  str += ("p");
  str += (" ");
  str += ("cnf");
  str += (" ");
  str += std::to_string(k);
  str += (" ");
  str += std::to_string(cnf_no);
  cnf_head.push_back(str);
}


void cnfencoder(int x,int y,int k,int adjacency[][200]){

  //int x,y,k;
  //int adjacency[k][k];
  int node_no=1;
  std::fstream outputfile("input.dimacs",std::ios::out);
  if(outputfile.fail()) std::cout<<"file open faild"<<std::endl;
  std::vector<int> cons;
  //adjacency[1][2] = 1;
  //adjacency[2][3] = 1;
  
  
  for(int i=0;i<k;i++){
    for(int j=0;j<y;j++){
      for(int l=0;l<x;l++){ 
        node.id=node_no;
        node.x=l;
        node.y=j;
        node.k=i;
        node_list.push_back(node);
        node_no++;
      }
    }
  }

  for(int i=0;i<k;i++){
    for(int j=0;j<y;j++){
      for(int l=0;l<x;l++){
        addCNF1va(getNodeNo(l,j,i));
      }
    }
    addCNF0va();
    cnf_no++;
  }

  for(int i=0;i<y;i++){
    for(int j=0;j<x;j++){
      for(int l=0;l<k;l++){
        addCNF1va(getNodeNo(j,i,l));
      }
      addCNF0va();
      cnf_no++;
    }
  }

  for(int i=0;i<y;i++){ 
    for(int j=0;j<x;j++){
      for(int l=0;l<k;l++){
        for(int m=0;m<k;m++){
          if(l != m){
            addCNF2va(getNodeNo(j,i,l),getNodeNo(j,i,m));
            cnf_no++;
          }
        }
      }
    }
  }

  for(int i=0;i<k;i++){
    for(int l=0;l<y;l++){
      for(int j=0;j<x;j++){
        for(int m=0;m<y;m++){
          for(int n=0;n<x;n++){
            if(j!=n || l!=m){
              addCNF2va(getNodeNo(j,l,i),getNodeNo(n,m,i));
              cnf_no++;
            }
          }
        }
      }
    }
  }

  

  for(int i=0;i<k;i++){
    for(int j=0;j<k;j++){
      if(adjacency[i][j]==1){
        for(int l=0;l<y;l++){
          for(int m=0;m<x;m++){
             addCNF3va(getNodeNo(m,l,i));
             if(m-1!=-1){
               addCNF1va(getNodeNo(m-1,l,j));
             }
             if(m+1!=x){
               addCNF1va(getNodeNo(m+1,l,j));
             }
             if(l-1!=-1){
               addCNF1va(getNodeNo(m,l-1,j));
             }
             if(l+1!=y){
               addCNF1va(getNodeNo(m,l+1,j));
             }
          addCNF0va();
          cnf_no++;
          }
        }
      }
    }
  }

  addCNF4va(x*y*k);

  for(auto e:cnf_head){
    outputfile<<e<<std::endl;
  }

  for(auto e:cnf){
    outputfile<<e<<std::endl;
  }

  outputfile.close();

  
}

int main(){

  int x=3;
  int y=3;
  int k=9;
  int adjacency[200][200]={0};
  int temp;
  int count=0;
  int pid,code,status;
  int x2,y2,k2;
  pid_t result;
  adjacency[0][2]=1;
  adjacency[2][3]=1;

  cnfencoder(x,y,k,adjacency);

  pid = fork();
  if(pid == -1){
    std::cout<<"pid error"<<std::endl;
  }
  if(pid == 0){
    execl("./glueminisat-simp","./glueminisat-simp","input.dimacs","output",NULL);
  }
  else{
    result = wait(&status);
  }

  if(result < 0){
    fprintf(stderr, "Wait Error.\n\n");
    exit(-1);
  }
      
      // 終了ステータスのチェック
  if(WIFEXITED(status)){
    //printf("子プロセス終了");
    code = WEXITSTATUS(status);
    //printf("コード : %d\n", code);
  }
  else{
    std::cout<<"wait失敗"<<std::endl;
    printf("終了コード : %d\n", status);
  }
      

  std::fstream ifs("output",std::ios::in);
  if(ifs.fail()) std::cout<<"file open failed"<<std::endl;
  std::string str;
  std::vector<std::string> result_str;
  std::vector<int> result_int;

  while(!ifs.eof()){
    ifs>>str;
    if(str!="SAT"){
      temp = std::stoi(str);
      //std::cout<<temp<<std::endl;
      if(temp>0){
        result_int.push_back(temp);
      }
    }
  }
  
  for(auto e:result_int){
    std::cout<<e<<std::endl;
  }

  for(auto e:result_int){
    x2 = getXNo(e);
    y2 = getYNo(e);
    k2 = getKNo(e);
    std::cout<<x2<<y2<<k2<<std::endl;
  }

  return 0;
}
